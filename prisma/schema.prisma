// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
  
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// enum Role {
//   ADMIN
//   USER
// }

// model Job {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String
//   title             String
//   description       String?
//   short_description String?
//   imageUrl          String?
//   isPublished       Boolean @default(false)
//   tags             String[]
//   savedUsers       String[]
//   shiftTiming      String?
//   hourlyRate       String?
//   yearsOfExperience String?
//   workMode         String?
  
//   categoryId  String?  @db.ObjectId
//   category    Category? @relation(fields: [categoryId], references: [id])

//   companyId   String?  @db.ObjectId
//   company     Company? @relation(fields: [companyId], references: [id])
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now())

//   @@index([categoryId])
//   @@index([companyId])
//   @@fulltext ([title])
// }


// model Company {
//   id            String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId        String
//   name          String
//   description   String?
//   logo          String?
//   coverImage    String?
//   mail          String?
//   website       String?
//   linkedIn      String?
//   address_line_1 String?
//   address_line_2 String?
//   city          String?
//   state         String?
//   zipcode       String?
//   jobs          Job[]
//   followers     String[]
//   overview     String?
//   whyJoinUs    String?
//   created     DateTime @default(now())
//   updated     DateTime @default(now())
// }


// model Category {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   name       String   @unique
//   jobs       Job[]
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @default(now())
// }

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String?
//   email     String   @unique
//   password  String
//   role      Role     @default(USER)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model UserProfile {
//   userId          String    @id @map("_id") @db.ObjectId
//   fullName    String
//   email       String
//   contact     String
//   appliedJobs AppliedJob[]
//   activeResume String
//   resumes     Resumes[]
// }

// type AppliedJob {
//   jobId      String
//   appliedAt  DateTime @default(now())
// }

// model Resumes {
//   id          String      @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   url         String
//   userProfile UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
//   userProfileId String @db.ObjectId
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now())

//   @@index([userProfileId], name: "idx_userProfileId")
// }



// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// enum Role {
//   ADMIN
//   USER
// }

// model Job {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String
//   title             String
//   description       String?
//   short_description String?
//   imageUrl          String?
//   isPublished       Boolean @default(false)
//   tags              String[]
//   savedUsers        String[]
//   shiftTiming       String?
//   hourlyRate        String?
//   yearsOfExperience String?
//   workMode          String?
  
//   categoryId  String?  @db.ObjectId
//   category    Category? @relation(fields: [categoryId], references: [id])

//   companyId   String?  @db.ObjectId
//   company     Company? @relation(fields: [companyId], references: [id])
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now())

//   @@index([categoryId])
//   @@index([companyId])
//   @@fulltext ([title])
// }

// model Company {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId         String
//   name           String
//   description    String?
//   logo           String?
//   coverImage     String?
//   mail           String?
//   website        String?
//   linkedIn       String?
//   address_line_1 String?
//   address_line_2 String?
//   city           String?
//   state          String?
//   zipcode        String?
//   jobs           Job[]
//   followers      String[]
//   overview       String?
//   whyJoinUs      String?
//   created        DateTime @default(now())
//   updated        DateTime @default(now())
// }

// model Category {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String   @unique
//   jobs      Job[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
// }

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String?
//   email     String   @unique
//   password  String
//   role      Role     @default(USER)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
// model UserProfile {
//   // userId alanından @db.ObjectId kaldırıldı, böylece string formatında saklanabiliyor.
//   userId       String   @id @map("_id")
//   fullName     String
//   email        String   @default("ornek@eposta.com")
//   contact      String   @default("05XXXXXXXXX")
//   appliedJobs  AppliedJob[]
//   activeResume String   @default("resume_örnek_id")
//   resumes      Resumes[]
// }




// type AppliedJob {
//   jobId     String
//   appliedAt DateTime @default(now())
// }

// model Resumes {
//   id           String      @id @default(auto()) @map("_id") @db.ObjectId
//   name         String
//   url          String
//   userProfile  UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
//   // userProfileId alanından @db.ObjectId kaldırıldı, böylece UserProfile.userId ile uyumlu hale geldi.
//   userProfileId String
//   createdAt    DateTime    @default(now())
//   updatedAt    DateTime    @default(now())

//   @@index([userProfileId], name: "idx_userProfileId")
// }


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  USER
}

model Job {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  title             String
  description       String?
  short_description String?
  imageUrl          String?
  isPublished       Boolean  @default(false)
  tags              String[]
  savedUsers        String[]
  shiftTiming       String?
  hourlyRate        String?
  yearsOfExperience String?
  workMode          String?
  location Json?


  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])



  companyId  String?   @db.ObjectId
  company    Company?  @relation(fields: [companyId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@index([categoryId])
  @@index([companyId])
  @@fulltext ([title])
}



// model Company {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId         String
//   name           String
//   description    String   @default("")   // Boş veri girilmediğinde boş string dönecek
//   logo           String   @default("")
//   coverImage     String   @default("")
//   mail           String   @default("")
//   website        String   @default("")
//   linkedIn       String   @default("")
//   address_line_1 String   @default("")
//   address_line_2 String   @default("")
//   city           String   @default("")
//   state          String   @default("")
//   zipcode        String   @default("")
//   jobs           Job[]
//   followers      String[] @default([])  // Boş dizi olarak varsayılan değer
//   overview       String   @default("")
//   whyJoinUs      String   @default("")
//   created        DateTime @default(now())
//   updated        DateTime @default(now())
  
// }

model Company {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  name           String
  description    String   @default("")   // Boş veri girilmediğinde boş string dönecek
  logo           String   @default("")
  coverImage     String   @default("")
  mail           String   @default("")
  website        String   @default("")
  linkedIn       String   @default("")
  address_line_1 String   @default("")
  address_line_2 String   @default("")
  city           String   @default("")
  state          String   @default("")
  zipcode        String   @default("")
  jobs           Job[]
  followers      String[] @default([])  // Boş dizi olarak varsayılan değer
  overview       String   @default("")
  whyJoinUs      String   @default("")
  created        DateTime @default(now())
  updated        DateTime @default(now())
  isPublished Boolean  @default(false)
  location Location? @relation(fields: [locationId], references: [id])
  locationId String?

  
  

  
}

model Location {
  id       String @id @default(uuid()) @map("_id")
  country  String
  city     String
  address  String?
  zipCode  String?

  Company Company[]
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  // userId alanından @db.ObjectId kaldırıldı, böylece string formatında saklanabiliyor.
  userId       String   @id @map("_id")
  fullName     String
  email        String   @default("ornek@eposta.com")
  contact      String   @default("05XXXXXXXXX")
  appliedJobs  AppliedJob[]
  activeResume String   @default("resume_örnek_id")
  resumes      Resumes[]
}

model AppliedJob {
  id        String      @id @default(uuid()) @map("_id")
  jobId     String
  appliedAt DateTime    @default(now())
  userId    String
  user      UserProfile @relation(fields: [userId], references: [userId])
}

// type AppliedJob {
//   jobId     String
//   appliedAt DateTime @default(now())
// }

model Resumes {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  url          String
  userProfile  UserProfile @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)
  // userProfileId alanından @db.ObjectId kaldırıldı, böylece UserProfile.userId ile uyumlu hale geldi.
  userProfileId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())

  @@index([userProfileId], name: "idx_userProfileId")
}
